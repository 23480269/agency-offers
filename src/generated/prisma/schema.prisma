// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  name             String
  email            String     @unique
  password         String
  role             Role       @default(USER)
  offers           Offer[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  feedbacks        Feedback[]
  orders           Order[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Offer {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  status      OfferStatus @default(PENDING)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]
  feedbacks   Feedback[]
  createdAt   DateTime    @default(now())
}

enum OfferStatus {
  PENDING
  APPROVED
  REJECTED
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int
  offer      Offer?   @relation(fields: [offerId], references: [id])
  offerId    Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Int?
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  offer     Offer    @relation(fields: [offerId], references: [id])
  offerId   Int
  createdAt DateTime @default(now())
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  serviceId Int
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id])
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}
